import os


apikey = os.environ['key']
apisecret = os.environ['secret']
divisor=100
LEV_MAX = 7.5
import requests 
import math
from datetime import timedelta
import datetime
import sys
import threading
import linecache
from time import sleep
coinsto = ['BTC', 'ETH', 'XRP', 'BCH', 'LTC', 'EOS', 'LINK', 'DOT', 'ADA', 'BSV', 'ETC', 'TRX']
wantingold = {}
for coin in coinsto:
    wantingold[coin] = None
import ccxt
binance     = ccxt.binance({'enableRateLimit': True,
"options":{"defaultMarket":"futures"},
'urls': {'api': {
                         'public': 'https://dapi.binance.com/dapi/v1',
                         'private': 'https://dapi.binance.com/dapi/v1',},}
})
levs = {}

#print(dir(binance))
abc=432#sleep(1)
SECONDS_IN_DAY      = 3600 * 24
from cryptofeed import FeedHandler
from cryptofeed import FeedHandler
from cryptofeed.callback import BookCallback, TickerCallback, TradeCallback
from cryptofeed.defines import TICKER_FUTURES, TICKER_OKS, BID, ASK, FUNDING, L2_BOOK, OPEN_INTEREST, TICKER, TRADES
from cryptofeed.exchanges import OKEx, KrakenFutures, BinanceFutures, FTX
from cryptofeed.exchanges import HuobiDM as hdm
fh = FeedHandler()
fundingwinners = []
from flask import Flask

from flask_cors import CORS, cross_origin
app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

from flask import jsonify

minArb = 0.015
print(minArb)

minArb = minArb * 75
print(minArb)
minArb = minArb * 365 
print(minArb)
premiumwinners = []
@app.route('/json')
def summary():
    global fundingwinners, premiumwinners
    return jsonify({'premiumwinners': premiumwinners, 'fundingwinners': fundingwinners})

def loop_in_thread():
    fh.run()
def loop_in_thread2():
    app.run(host='0.0.0.0', port=8080)

def PrintException():
    exc_type, exc_obj, tb = sys.exc_info()
    f = tb.tb_frame
    lineno = tb.tb_lineno
    filename = f.f_code.co_filename
    linecache.checkcache(filename)
    line = linecache.getline(filename, lineno, f.f_globals)
    string = 'EXCEPTION IN ({}, LINE {} "{}"): {}'.format(filename, lineno, line.strip(), exc_obj)
    print    (string)
    if 'UNI' not in string and 'PostCross' not in string and 'PostFuture' not in string:
        abc=432#sleep(0.1)
#        if 'Account does not have enough margin for order' not in string:
            #abc=432#sleep(1)
async def ticker(feed, pair, bid, ask, timestamp, ex):
    global mids
    #print(f'Ex?: {ex} Timestamp: {timestamp} Feed: {feed} Pair: {pair} Bid: {bid} Ask: {ask}')
    if 'OKEX' in feed.upper():
        ex = 'ftx'
        if 'USDT' not in pair:
            name = pair.split('-')[0]
            if '-' not in pair:
                return
            dt = pair[-4:]
            if dt == 'SWAP':
                dt = 'PERP'
            #print(pair)
        else:
            return
    elif 'FTX' in feed:
        ex = 'ftx'
        name = pair.split('-')[0]
        if '-' not in pair:
            return
        dt = pair.split('-')[1]
        #print(dt)
    elif 'KRAKEN' in feed:
        if 'PI' in pair:
            p = pair.split('_')[1]
            name = p.replace('USD','').replace('XBT','BTC')
            dt = 'PERP'
        else:
            name = pair.split('_')[1].split('_')[0].replace('USD', '').replace('XBT', 'BTC')
            dt = pair[-4:]
        ex = 'kraken'
    elif 'BINANCE' in feed:
        #ETH-USD_200925
        name = pair.split('-')[0]
        dt = pair[-4:]
        ex = 'binance'
        #print(dt)
 
   # abc=123#Print(feed + '-' + name + '-' + dt +': ' + str( 0.5 * ( float(bid) + float(ask))))
    mids[ex][name + '-' + dt] = 0.5 * ( float(ask) + float(bid))
    bids[ex][name + '-' + dt] = float(bid)
    asks[ex][name + '-' + dt] = float(ask) 
pairs = {}
async def book(feed, pair, book, timestamp, receipt_timestamp):
    global mids, pairs
    hb = 0
    la = 99999999999999
    for bid in book[BID]:
        if bid > hb:
            hb = bid
    for ask in book[ASK]:
        if ask < la:
            la = ask
    #print(pair)
    dt = pair[-4:]

    name = pair.split('21')[0].split('21')[0].split('20')[0].split('20')[0]
    pairs[name + '-' + dt] = pair
    #print(name)
  #  if 'BTC' in name and lastex != feed and lastbtc != 0.5 * ( float(bid) + float(ask)):
    #    lastex = feed
   #     lastbtc = 0.5 * ( float(bid) + float(ask))
        #print(feed + '-' + name + '-' + dt +': ' + str( 0.5 * ( float(bid) + float(ask))))
    #print(pair)
    #print(name + '-' + dt)
    if name in coinsto:
        mids['huobi'][name + '-' + dt] = 0.5 * ( float(la) + float(hb))
        #print(mids)
        bids['huobi'][name + '-' + dt] = float(hb)
        asks['huobi'][name + '-' + dt] = float(la) 
    #print(f'Timestamp: {timestamp} Feed: {feed} Pair: {pair} Book Bid Size is {len(book[BID])} Ask Size is {len(book[ASK])}')
def cancelall():
    try:
        #print()
        """
        ords = ftx.fetchOpenOrders( )
        for order in ords:
            ###print(order)
            oid = order['info'] ['id']
            #print(order)
           # abc=432#sleep(100)
           # ##print(order)
            try:
                
                ftx.cancelOrder( oid , order['info']['future'])
            except Exception as e:
                PrintException()

        """
    except Exception as e:
        PrintException()
arbwinnersavg = []
arbwinnersc = []
maxmax = 0
def doCalc():
    try:
        offsets = {}
        hspot.privatePostOrderOrdersBatchCancelOpenOrders()
        global premiumwinners, arbwinnersc, arbwinnersavg, maxmax, mids
        
        for contract in huobisw:
            if contract.split('-')[0] in huobis and contract.split('-')[0] in coinsto:
                data = requests.get("https://api.hbdm.com/swap-ex/market/detail/merged?contract_code=" + contract).json()['tick']
                ask = data['ask'][0]
                bid = data['bid'][0]
                name = contract.split('-')[0]
                dt = 'PERP'
                ex = 'huobi'
                mids[ex][name + '-' + dt] = 0.5 * ( float(ask) + float(bid))
                bids[ex][name + '-' + dt] = float(bid)
                asks[ex][name + '-' + dt] = float(ask) 
                #print(name)
        #print(1)
        dts = []
        coins = []
        tempmids = mids
        for ex in tempmids:
            for coin in tempmids[ex]:
                
                #print(coin)
                if '-' in coin:
                    if coin.split('-')[1] not in dts:
                        dts.append(coin.split('-')[1])
                    if coin.split('-')[0] not in coins:
                        coins.append(coin.split('-')[0].split('20')[0].split('21')[0])
        arbs = {}
        exes = {}
        #print(expis)
        for contract in huobis:
            for exp in expis:
                sizeIncrements[contract + '-' + exp] = sizeIncrements[contract]
                
        for coin in coins:
            arbs[coin] = {}
            exes[coin] = {}
            for ex in tempmids:
                for dt in expis:
                    arbs[coin][dt] = []
                    exes[coin][dt] = {}
        for coin in coins:
            for ex in tempmids:
                for dt in tempmids[ex]:
                    try:
                        if '-' in dt:
                         exes[coin][dt.split('-')[1]][tempmids[ex][dt]] = ex
                    except:
                        abc=123
                      #  PrintException()
                   # abc=123#Print(dt)
                    if coin in dt:
                        
                        try:
                            if '-' in dt:
                                if 'e' not in str(tempmids[ex][dt]):
                                
                                    arbs[coin][dt.split('-')[1]].append(tempmids[ex][dt])
                                
                        except:
                            PrintException()
                            abc=123
        
        
        perps = {}
        lalaexes = {}
        for coin in coins:
            for ex in tempmids:
                for dt in tempmids[ex]:
                   # abc=123#Print(dt)
                    if coin in dt and 'PERP' in dt:
                        perps[coin] = tempmids[ex][dt]
                        lalaexes[coin] = ex
                        
        for coin in arbs:
            for dt in arbs[coin]:
                try:
                    if '-' in dt:
                        if 'e' not in str(perps[coin]):
                            arbs[coin][dt].append(perps[coin])
                            exes[coin][dt][perps[coin]] = lalaexes[coin]
                except:
        #            PrintException()
                    PrintException()
        #print(exes)
        #print(arbs)
        #print(expis)
        thearbs = []
        coinarbs = {}
        minmax = {}
        windts = {}
        winprices = {}
        #print(2)
        for coin in arbs:
            minmax[coin] = []
            windts[coin] = {}
            winprices[coin] = {}
            for dt in expis:
                if dt != 'PERP':
                    try:
                        #print(len(arbs[coin][dt]))
                        #if len(arbs[coin][dt]) > 0:
                        minmax[coin].append(math.fabs(tempmids['huobi'][coin + '-' + dt] - tempmids['huobi'][coin + '-PERP']))
                        windts[coin][math.fabs(tempmids['huobi'][coin + '-' + dt] - tempmids['huobi'][coin + '-PERP'])] = dt
                        winprices[coin][math.fabs(tempmids['huobi'][coin + '-' + dt] - tempmids['huobi'][coin + '-PERP'])] = tempmids['huobi'][coin + '-' + dt]
                        #minimum = tempmids['ftx'][coin + '-PERP']  #10900/10709 #pos long perp, neg short perp
                    except:
                        PrintException()
                        abc=123
        for coin in arbs:

            try:
                maximum = max(minmax[coin])
                
                windt = windts[coin][maximum]
                maximum = winprices[coin][maximum]
                minimum = tempmids['huobi'][coin + '-PERP']
                #maximum = tempmids['ftx'][coin + '-' + dt] #pos short fut, neg long fut #pos long perp, neg short perp
     #           if coin == 'BTC':
     ##               abc=123#Print(arbs[coin][dt])
      #              abc=123#Print(maximum / minimum)
                thearb = ((((maximum / minimum)-1)*100)*365*levs[coin]) #1.1/1.05 = 
                #print(thearb)
                #print(expis[dt])
                #print('thearb of ' + coin + ' at ' + dt + ' in total ' + str(thearb)) 
                thearb = thearb / expis[windt] 
                
                #print(thearb)
                #print( ' ' )
                thearb = thearb #- 36
                coinarbs[thearb] = coin + '-' + windt 
                if thearb > 50 or thearb < -50:
                    thearbs.append(thearb)
                    abc=123#Print(thearb)
                    #print(coinarbs[thearb])
                    abc=123#Print(windt)
                    abc=123#Print(maximum)
                    abc=123#Print(minimum)
                else:
                    thearbs.append(0)
                """
                if thearb > 10 and coin != 'USDT':
                   # abc=123#Print(exes[coin][dt])
                    thearbs.append({'exlong': exes[coin][dt][minimum], 'exshort': exes[coin][dt][maximum], 'coin': coin, 'thearb': thearb, 'dt': dt, 'arbscoindt': arbs[coin][dt]})
                    abc=123#Print({'exlong': exes[coin][dt][minimum], 'exshort': exes[coin][dt][maximum], 'coin': coin, 'thearb': thearb, 'dt': dt, 'arbscoindt': arbs[coin][dt]})
                """
              #  abc=123#Print('and after figuring out daily arb it\'s ' +  str(thearb))
                
            except:
                PrintException()
                PrintException()
                PrintException()
        t = 0
        c = 0
        #print(3)
        #print(thearbs)
        for arb in thearbs:
            
            t = t + math.fabs(arb)
            if arb != 0:
                c = c + 1
        percs = {}
        wanting = {}
        if c > 0:
            avg = t / c
            c1 = c
            
            t = 0 
            c = 0 
            maxi = 0
            for arb in thearbs:
                if math.fabs(arb) > avg:
                    abc=123#Print(coinarbs[arb] + ' is a good coin no?')
                    if arb > maxi:
                        maxi = arb
                    if arb > maxmax:
                        maxmax = arb
                    t = t + math.fabs(arb)
                    c = c + 1
            for arb in thearbs:
                try:
                    if arb in coinarbs:
                        if '-' in coinarbs[arb]:
                            if math.fabs(arb) > avg:
                                percs[coinarbs[arb].split('-')[0]] = arb / t
                                if coinarbs[arb] in usdpos: #-0.3 * 10 * 100 + 360 #-0.16*400*10+1826=1186
                                                                                   #-0.16*400*10-266=-906
                                    wanting[coinarbs[arb]] = arb / t * (levs[coinarbs[arb].split('-')[0]]) * balance
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] * -1
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] # - usdpos[coinarbs[arb]]
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] / (levs[coinarbs[arb].split('-')[0]])
                                    wanting[coinarbs[arb]] = round(wanting[coinarbs[arb]] / 10) * 10
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] * (levs[coinarbs[arb].split('-')[0]])
                                
                                else:
                                    wanting[coinarbs[arb]] = arb / t * (levs[coinarbs[arb].split('-')[0]]) * balance
                                    
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] * -1
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] / (levs[coinarbs[arb].split('-')[0]])
                                    wanting[coinarbs[arb]] = round(wanting[coinarbs[arb]] / 10) * 10
                                    wanting[coinarbs[arb]] = wanting[coinarbs[arb]] * (levs[coinarbs[arb].split('-')[0]])
                                if coinarbs[arb].split('-')[0] + '-PERP' in usdpos:
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] =  percs[coinarbs[arb].split('-')[0]] * (levs[coinarbs[arb].split('-')[0]]) * balance #- usdpos[coinarbs[arb].split('-')[0] + '-PERP']
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] / (levs[coinarbs[arb].split('-')[0]])
                                    
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = round(wanting[coinarbs[arb].split('-')[0] + '-PERP'] / 10) * 10
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] * (levs[coinarbs[arb].split('-')[0]])
                                else:
                                   # if percs[coinarbs[arb].split('-')[0]] > 0:
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] =  percs[coinarbs[arb].split('-')[0]] * LEV_MAX * balance
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] / (levs[coinarbs[arb].split('-')[0]])
                                    
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = round(wanting[coinarbs[arb].split('-')[0] + '-PERP'] / 10) * 10
                                    wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] * (levs[coinarbs[arb].split('-')[0]])
                                
                            else:
                                #if arb != 0:
                                
                                if arb in coinarbs:
                                    if '-' in coinarbs[arb]:
                                        percs[coinarbs[arb].split('-')[0]] = 0
                                        if coinarbs[arb] in usdpos:
                                        
                                            wanting[coinarbs[arb]] = -1 #* usdpos[coinarbs[arb]]
                                            wanting[coinarbs[arb]] = wanting[coinarbs[arb]] / (levs[coinarbs[arb].split('-')[0]])
                                            wanting[coinarbs[arb]] = round(wanting[coinarbs[arb]] / 10) * 10
                                            wanting[coinarbs[arb]] = wanting[coinarbs[arb]] * (levs[coinarbs[arb].split('-')[0]])
                                        else:
                                            
                                            wanting[coinarbs[arb]] = 0
                                        if coinarbs[arb].split('-')[0] + '-PERP' in usdpos:
                                            wanting[coinarbs[arb].split('-')[0] + '-PERP'] = -1 #* usdpos[coinarbs[arb].split('-')[0] + '-PERP']
                                            wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] / (levs[coinarbs[arb].split('-')[0]])
                                
                                            wanting[coinarbs[arb].split('-')[0] + '-PERP'] = round(wanting[coinarbs[arb].split('-')[0] + '-PERP'] / 10) * 10
                                            wanting[coinarbs[arb].split('-')[0] + '-PERP'] = wanting[coinarbs[arb].split('-')[0] + '-PERP'] * (levs[coinarbs[arb].split('-')[0]])
                                        else:
                                        
                                            wanting[coinarbs[arb].split('-')[0] + '-PERP'] =  0
                                                
                                    
                            
                except:
                    PrintException()
            #print(wanting)
            #print(4)
            for pos2 in usdpos:
                if pos2 not in wanting:
                    if usdpos[pos2] != 0:
                        #wanting[pos2] = -1 * usdpos[pos2]
                        abc=123#Print(pos2)
                        abc=123#Print(wanting)
                        #abc=432#sleep(10)
            abc=123#Print(wanting)
            twanting = {}
            futwants = {}
            lowers = {}
            counts = {}
            twanting = {}
            for arb in wanting:
                lowers[arb] = 999999999999999
                counts[arb.split('-')[0]] = 0
                
                twanting[arb] = 0
            for arb in wanting:
                if 'PERP' not in arb:
                    futwants[arb.split('-')[0]] = 0
                    
                    counts[arb.split('-')[0]] = counts[arb.split('-')[0]] + 1
                    #twanting[arb.split('-')[0] + '-PERP'] = wanting[arb.split('-')[0] + '-PERP'] + wanting[arb]
            
            for arb in wanting:
                if 'PERP' not in arb:
                    futwants[arb.split('-')[0]] = futwants[arb.split('-')[0]] + wanting[arb]
                    
            for arb in futwants:
                for coin in wanting:
                    if 'PERP' in coin:
                        twanting[coin] = futwants[coin.split('-')[0]] * -1

